/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: ../../swig.i

#define SWIGMODULE neoradio2

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef int intgo;
typedef unsigned int uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




static void *_swig_goallocate(size_t len) {
  struct {
    size_t len;
    void *ret;
  } SWIGSTRUCTPACKED a;
  a.len = len;
  crosscall2(_cgo_allocate, &a, (int) sizeof a);
  return a.ret;
}




/* This is here for backward compatibility, but it will not work
   with Go 1.5 or later.  Do not use it in new code.  */
static _gostring_ _swig_makegostring(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)_swig_goallocate(l + 1);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}



#include "../libneoradio2.h"
#include "../libneoradio2common.h"

extern void neoradio2_set_blocking(int blocking, long long ms_timeout);
extern int neoradio2_find(Neoradio2DeviceInfo* devices, unsigned int* device_count);
extern int neoradio2_is_blocking();
extern int neoradio2_open(neoradio2_handle* handle, Neoradio2DeviceInfo* device);
extern int neoradio2_is_opened(neoradio2_handle* handle, int* is_opened);
extern int neoradio2_close(neoradio2_handle* handle);
extern int neoradio2_is_closed(neoradio2_handle* handle, int* is_closed);
extern int neoradio2_chain_is_identified(neoradio2_handle* handle, int* is_identified);
extern int neoradio2_chain_identify(neoradio2_handle* handle);
extern int neoradio2_app_is_started(neoradio2_handle* handle, int device, int bank, int* is_started);
extern int neoradio2_app_start(neoradio2_handle* handle, int device, int bank);
extern int neoradio2_enter_bootloader(neoradio2_handle* handle, int device, int bank);
extern int neoradio2_get_serial_number(neoradio2_handle* handle, int device, int bank, unsigned int* serial_number);
extern int neoradio2_get_manufacturer_date(neoradio2_handle* handle, int device, int bank, int* year, int* month, int* day);
extern int neoradio2_get_firmware_version(neoradio2_handle* handle, int device, int bank, int* major, int* minor);
extern int neoradio2_get_hardware_revision(neoradio2_handle* handle, int device, int bank, int* major, int* minor);
extern int neoradio2_get_device_type(neoradio2_handle* handle, int device, int bank, unsigned int* device_type);
extern int neoradio2_request_pcbsn(neoradio2_handle* handle, int device, int bank);
extern int neoradio2_get_pcbsn(neoradio2_handle* handle, int device, int bank, char* pcb_sn);
extern int neoradio2_request_sensor_data(neoradio2_handle* handle, int device, int bank, int enable_cal);
extern int neoradio2_read_sensor_float(neoradio2_handle* handle, int device, int bank, float* value);
extern int neoradio2_read_sensor_array(neoradio2_handle* handle, int device, int bank, int* arr, int* arr_size);
extern int neoradio2_write_sensor(neoradio2_handle* handle, int device, int bank, int mask, int value);
extern int neoradio2_write_sensor_successful(neoradio2_handle* handle, int device, int bank);
extern int neoradio2_request_settings(neoradio2_handle* handle, int device, int bank);
extern int neoradio2_read_settings(neoradio2_handle* handle, int device, int bank, neoRADIO2_settings* settings);
extern int neoradio2_write_settings(neoradio2_handle* handle, int device, int bank, neoRADIO2_settings* settings);
extern int neoradio2_write_settings_successful(neoradio2_handle* handle, int device, int bank);
extern int neoradio2_get_chain_count(neoradio2_handle* handle, int* count, int identify);
extern int neoradio2_request_calibration(neoradio2_handle* handle, int device, int bank, neoRADIO2frame_calHeader* header);
extern int neoradio2_read_calibration_array(neoradio2_handle* handle, int device, int bank, neoRADIO2frame_calHeader* header, float* arr, int* arr_size);
extern int neoradio2_request_calibration_points(neoradio2_handle* handle, int device, int bank, neoRADIO2frame_calHeader* header);
extern int neoradio2_read_calibration_points_array(neoradio2_handle* handle, int device, int bank, neoRADIO2frame_calHeader* header, float* arr, int* arr_size);
extern int neoradio2_write_calibration(neoradio2_handle* handle, int device, int bank, neoRADIO2frame_calHeader* header, float* arr, int arr_size);
extern int neoradio2_write_calibration_successful(neoradio2_handle* handle, int device, int bank);
extern int neoradio2_write_calibration_points(neoradio2_handle* handle, int device, int bank, neoRADIO2frame_calHeader* header, float* arr, int arr_size);
extern int neoradio2_write_calibration_points_successful(neoradio2_handle* handle, int device, int bank);
extern int neoradio2_store_calibration(neoradio2_handle* handle, int device, int bank);
extern int neoradio2_is_calibration_stored(neoradio2_handle* handle, int device, int bank, int* stored);
extern int neoradio2_get_calibration_is_valid(neoradio2_handle* handle, int device, int bank, int* is_valid);

extern int neoradio2_request_calibration_info(neoradio2_handle* handle, int device, int bank);
extern int neoradio2_read_calibration_info(neoradio2_handle* handle, int device, int bank, neoRADIO2frame_calHeader* header);


extern int neoradio2_toggle_led(neoradio2_handle* handle, int device, int bank, int ms);
extern int neoradio2_toggle_led_successful(neoradio2_handle* handle, int device, int bank);


extern int neoradio2_get_status(neoradio2_handle* handle, int device, int bank, int bitfield, StatusType type, CommandStatus* status);


#ifdef __cplusplus
extern "C" {
#endif

void
_wrap_Swig_free_neoradio2_67b190837e1cf255(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  void *_swig_go_0;
  struct swigargs {
    void *arg1;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void
_wrap_Swig_malloc_neoradio2_67b190837e1cf255(void *swig_v)
{
  int arg1 ;
  void *result = 0 ;
  intgo _swig_go_0;
  void *_swig_go_result;
  char *swig_stktop;
  struct swigargs {
    intgo arg1;
    long : 0;
    void *result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  arg1 = (int)_swig_go_0; 
  
  swig_stktop = _swig_topofstack();
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusInProgress_neoradio2_67b190837e1cf255(void *swig_v)
{
  _CommandStatus result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusInProgress;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusFinished_neoradio2_67b190837e1cf255(void *swig_v)
{
  _CommandStatus result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusFinished;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusError_neoradio2_67b190837e1cf255(void *swig_v)
{
  _CommandStatus result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusError;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_CommandStateHost_neoradio2_67b190837e1cf255(void *swig_v)
{
  _CommandStateType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = CommandStateHost;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_CommandStateDevice_neoradio2_67b190837e1cf255(void *swig_v)
{
  _CommandStateType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = CommandStateDevice;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_CommandStateUnknown_neoradio2_67b190837e1cf255(void *swig_v)
{
  _CommandStateType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = CommandStateUnknown;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_Neoradio2DeviceInfo_name_set_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *arg1 = (_Neoradio2DeviceInfo *) 0 ;
  char *arg2 ;
  _Neoradio2DeviceInfo *_swig_go_0;
  _gostring_ _swig_go_1;
  struct swigargs {
    _Neoradio2DeviceInfo *arg1;
    _gostring_ arg2;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  _swig_go_1 = swig_a->arg2;
  arg1 = *(_Neoradio2DeviceInfo **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 64-1);
      arg1->name[64-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
  
  free(arg2); 
}


void
_wrap_Neoradio2DeviceInfo_name_get_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *arg1 = (_Neoradio2DeviceInfo *) 0 ;
  char *result = 0 ;
  _Neoradio2DeviceInfo *_swig_go_0;
  _gostring_ _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    _Neoradio2DeviceInfo *arg1;
    long : 0;
    _gostring_ result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  arg1 = *(_Neoradio2DeviceInfo **)&_swig_go_0; 
  
  swig_stktop = _swig_topofstack();
  result = (char *)(char *) ((arg1)->name);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_Neoradio2DeviceInfo_serial_str_set_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *arg1 = (_Neoradio2DeviceInfo *) 0 ;
  char *arg2 ;
  _Neoradio2DeviceInfo *_swig_go_0;
  _gostring_ _swig_go_1;
  struct swigargs {
    _Neoradio2DeviceInfo *arg1;
    _gostring_ arg2;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  _swig_go_1 = swig_a->arg2;
  arg1 = *(_Neoradio2DeviceInfo **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if(arg2) {
      strncpy((char*)arg1->serial_str, (const char *)arg2, 64-1);
      arg1->serial_str[64-1] = 0;
    } else {
      arg1->serial_str[0] = 0;
    }
  }
  
  free(arg2); 
}


void
_wrap_Neoradio2DeviceInfo_serial_str_get_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *arg1 = (_Neoradio2DeviceInfo *) 0 ;
  char *result = 0 ;
  _Neoradio2DeviceInfo *_swig_go_0;
  _gostring_ _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    _Neoradio2DeviceInfo *arg1;
    long : 0;
    _gostring_ result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  arg1 = *(_Neoradio2DeviceInfo **)&_swig_go_0; 
  
  swig_stktop = _swig_topofstack();
  result = (char *)(char *) ((arg1)->serial_str);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_Neoradio2DeviceInfo_vendor_id_set_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *arg1 = (_Neoradio2DeviceInfo *) 0 ;
  int arg2 ;
  _Neoradio2DeviceInfo *_swig_go_0;
  intgo _swig_go_1;
  struct swigargs {
    _Neoradio2DeviceInfo *arg1;
    intgo arg2;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  _swig_go_1 = swig_a->arg2;
  arg1 = *(_Neoradio2DeviceInfo **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->vendor_id = arg2;
  
}


void
_wrap_Neoradio2DeviceInfo_vendor_id_get_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *arg1 = (_Neoradio2DeviceInfo *) 0 ;
  int result;
  _Neoradio2DeviceInfo *_swig_go_0;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    _Neoradio2DeviceInfo *arg1;
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  arg1 = *(_Neoradio2DeviceInfo **)&_swig_go_0; 
  
  swig_stktop = _swig_topofstack();
  result = (int) ((arg1)->vendor_id);
  _swig_go_result = result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_Neoradio2DeviceInfo_product_id_set_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *arg1 = (_Neoradio2DeviceInfo *) 0 ;
  int arg2 ;
  _Neoradio2DeviceInfo *_swig_go_0;
  intgo _swig_go_1;
  struct swigargs {
    _Neoradio2DeviceInfo *arg1;
    intgo arg2;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  _swig_go_1 = swig_a->arg2;
  arg1 = *(_Neoradio2DeviceInfo **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->product_id = arg2;
  
}


void
_wrap_Neoradio2DeviceInfo_product_id_get_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *arg1 = (_Neoradio2DeviceInfo *) 0 ;
  int result;
  _Neoradio2DeviceInfo *_swig_go_0;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    _Neoradio2DeviceInfo *arg1;
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  arg1 = *(_Neoradio2DeviceInfo **)&_swig_go_0; 
  
  swig_stktop = _swig_topofstack();
  result = (int) ((arg1)->product_id);
  _swig_go_result = result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_Neoradio2DeviceInfo__reserved_set_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *arg1 = (_Neoradio2DeviceInfo *) 0 ;
  uint8_t *arg2 ;
  _Neoradio2DeviceInfo *_swig_go_0;
  uint8_t (*_swig_go_1)[32];
  struct swigargs {
    _Neoradio2DeviceInfo *arg1;
    uint8_t (*arg2)[32];
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  _swig_go_1 = swig_a->arg2;
  arg1 = *(_Neoradio2DeviceInfo **)&_swig_go_0; 
  arg2 = *(uint8_t **)&_swig_go_1; 
  
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->_reserved;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


void
_wrap_Neoradio2DeviceInfo__reserved_get_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *arg1 = (_Neoradio2DeviceInfo *) 0 ;
  uint8_t *result = 0 ;
  _Neoradio2DeviceInfo *_swig_go_0;
  uint8_t (*_swig_go_result)[32];
  char *swig_stktop;
  struct swigargs {
    _Neoradio2DeviceInfo *arg1;
    long : 0;
    uint8_t (*result)[32];
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  arg1 = *(_Neoradio2DeviceInfo **)&_swig_go_0; 
  
  swig_stktop = _swig_topofstack();
  result = (uint8_t *)(uint8_t *) ((arg1)->_reserved);
  *(uint8_t **)&_swig_go_result = result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_new_Neoradio2DeviceInfo_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *result = 0 ;
  _Neoradio2DeviceInfo *_swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    _Neoradio2DeviceInfo *result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = (_Neoradio2DeviceInfo *)new _Neoradio2DeviceInfo();
  *(_Neoradio2DeviceInfo **)&_swig_go_result = (_Neoradio2DeviceInfo *)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_delete_Neoradio2DeviceInfo_neoradio2_67b190837e1cf255(void *swig_v)
{
  _Neoradio2DeviceInfo *arg1 = (_Neoradio2DeviceInfo *) 0 ;
  _Neoradio2DeviceInfo *_swig_go_0;
  struct swigargs {
    _Neoradio2DeviceInfo *arg1;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  _swig_go_0 = swig_a->arg1;
  arg1 = *(_Neoradio2DeviceInfo **)&_swig_go_0; 
  
  delete arg1;
  
}


void
_wrap_StatusChain_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusChain;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusAppStart_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusAppStart;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusPCBSN_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusPCBSN;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusSensorRead_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusSensorRead;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusSensorWrite_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusSensorWrite;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusSettingsRead_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusSettingsRead;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusSettingsWrite_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusSettingsWrite;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusCalibration_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusCalibration;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusCalibrationPoints_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusCalibrationPoints;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusCalibrationStored_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusCalibrationStored;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusCalibrationInfo_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusCalibrationInfo;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusLedToggle_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusLedToggle;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


void
_wrap_StatusMax_neoradio2_67b190837e1cf255(void *swig_v)
{
  _StatusType result;
  intgo _swig_go_result;
  char *swig_stktop;
  struct swigargs {
    long : 0;
    intgo result;
  } SWIGSTRUCTPACKED *swig_a = (struct swigargs *) swig_v;
  
  
  swig_stktop = _swig_topofstack();
  result = StatusMax;
  
  _swig_go_result = (intgo)result; 
  swig_a = (struct swigargs*)((char*)swig_a + (_swig_topofstack() - swig_stktop));
  swig_a->result = _swig_go_result;
}


#ifdef __cplusplus
}
#endif

