# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package neoradio2;
use base qw(Exporter);
use base qw(DynaLoader);
package neoradio2c;
bootstrap neoradio2;
package neoradio2;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package neoradio2;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package neoradio2;


############# Class : neoradio2::Neoradio2DeviceInfo ##############

package neoradio2::Neoradio2DeviceInfo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( neoradio2 );
%OWNER = ();
%ITERATORS = ();
*swig_name_get = *neoradio2c::Neoradio2DeviceInfo_name_get;
*swig_name_set = *neoradio2c::Neoradio2DeviceInfo_name_set;
*swig_serial_str_get = *neoradio2c::Neoradio2DeviceInfo_serial_str_get;
*swig_serial_str_set = *neoradio2c::Neoradio2DeviceInfo_serial_str_set;
*swig_vendor_id_get = *neoradio2c::Neoradio2DeviceInfo_vendor_id_get;
*swig_vendor_id_set = *neoradio2c::Neoradio2DeviceInfo_vendor_id_set;
*swig_product_id_get = *neoradio2c::Neoradio2DeviceInfo_product_id_get;
*swig_product_id_set = *neoradio2c::Neoradio2DeviceInfo_product_id_set;
*swig__reserved_get = *neoradio2c::Neoradio2DeviceInfo__reserved_get;
*swig__reserved_set = *neoradio2c::Neoradio2DeviceInfo__reserved_set;
sub new {
    my $pkg = shift;
    my $self = neoradio2c::new_Neoradio2DeviceInfo(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        neoradio2c::delete_Neoradio2DeviceInfo($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package neoradio2;

*StatusInProgress = *neoradio2c::StatusInProgress;
*StatusFinished = *neoradio2c::StatusFinished;
*StatusError = *neoradio2c::StatusError;
*CommandStateHost = *neoradio2c::CommandStateHost;
*CommandStateDevice = *neoradio2c::CommandStateDevice;
*CommandStateUnknown = *neoradio2c::CommandStateUnknown;
*NEORADIO2_SUCCESS = *neoradio2c::NEORADIO2_SUCCESS;
*NEORADIO2_FAILURE = *neoradio2c::NEORADIO2_FAILURE;
*NEORADIO2_ERR_WBLOCK = *neoradio2c::NEORADIO2_ERR_WBLOCK;
*NEORADIO2_ERR_INPROGRESS = *neoradio2c::NEORADIO2_ERR_INPROGRESS;
*NEORADIO2_ERR_FAILURE = *neoradio2c::NEORADIO2_ERR_FAILURE;
*NEORADIO2_MAX_DEVS = *neoradio2c::NEORADIO2_MAX_DEVS;
*StatusChain = *neoradio2c::StatusChain;
*StatusAppStart = *neoradio2c::StatusAppStart;
*StatusPCBSN = *neoradio2c::StatusPCBSN;
*StatusSensorRead = *neoradio2c::StatusSensorRead;
*StatusSensorWrite = *neoradio2c::StatusSensorWrite;
*StatusSettingsRead = *neoradio2c::StatusSettingsRead;
*StatusSettingsWrite = *neoradio2c::StatusSettingsWrite;
*StatusCalibration = *neoradio2c::StatusCalibration;
*StatusCalibrationPoints = *neoradio2c::StatusCalibrationPoints;
*StatusCalibrationStored = *neoradio2c::StatusCalibrationStored;
*StatusCalibrationInfo = *neoradio2c::StatusCalibrationInfo;
*StatusLedToggle = *neoradio2c::StatusLedToggle;
*StatusMax = *neoradio2c::StatusMax;
1;
